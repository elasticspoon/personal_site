# frozen_string_literal: true

require 'nokogiri'
require 'securerandom'

# Pre-process markdown to convert code blocks like
# ```language key=value,key=value to karamdown_tags like
# {: data-lang="language" data-key="value" data-key="value"}
# these will get set on the div that is generated by kramdown
# <div data-lang="ruby" data-key="value" data-key="value" class="language-ruby highlighter-rouge">
# <div><pre>...
CODE_BLOCK_HEADER_REGEX = /```(\w+) (.+)\n/
Jekyll::Hooks.register [:posts, :pages], :pre_render do |doc|
  new_content = doc.content.gsub(CODE_BLOCK_HEADER_REGEX) do
    lang, data = Regexp.last_match.captures

    data_attributes = data
                      .split(',')
                      .map { |pair| pair.split('=') }
                      .map { |key, value| "data-#{key}=\"#{value}\"" }

    <<~CODE_BLOCK_OPENER
      {: data-lang="#{lang}" #{data_attributes.join(' ')}}

        ```#{lang}
    CODE_BLOCK_OPENER
  end

  doc.content = new_content
end

# Processes HTML to append codapi-snippet custom elements
# after code blocks that have data attributes set.
# requires `data-interactive="true"` to append the custom element
# data-lang="value": sets the language to use
# data-editor="value": sets the editor to use (basic or disabled)
Jekyll::Hooks.register [:posts, :pages], :post_render do |doc|
  next unless doc.output_ext == '.html'

  html = Nokogiri::HTML(doc.output)

  html.css('[data-interactive="true"]').each do |code_block|
    # Generate unique ID for the code block
    uuid = "code-#{SecureRandom.uuid}"
    code_block['id'] = uuid
    code_block['class'] << "language-#{code_block.attribute('data-lang')}"

    # Set the required attributes
    codapi_element = html.create_element('codapi-snippet')
    codapi_element['engine'] = 'wasi'
    codapi_element['sandbox'] = code_block.attribute('data-lang')
    codapi_element['editor'] = code_block.attribute('data-editor')
    codapi_element['selector'] = "##{uuid}"

    playgroud_div = html.create_element('div')
    playgroud_div['class'] = 'playground'
    playgroud_div << code_block.clone
    playgroud_div << codapi_element

    code_block.replace(playgroud_div)
  end

  doc.output = html.to_html
end
